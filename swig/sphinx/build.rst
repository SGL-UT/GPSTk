.. _build_label:

Installation
======================

Preliminary steps
********************************************
Prerequisits for building and installing:

- install of cmake
- install of swig
- install of C++ compiler (e.g. gcc)
- install of python

Installing Pre-compiled Binaries
********************************************
At this point in time, pre-compiled binaries are not distributed.
Presently, the only option is to build from source.
In the future, we hope to release pre-built binaries.

Build and Install on POSIX using Bash script
******************************************************

The build system is composed of the following steps:

- Compiling object files for the C++ sources to generate a libgpstk.so
- Generates HTML documentation of the C++ library using Doxygen
- SWIG generated C++ wrapper source code to map C++ types to Python types
- Compiles and links the C++ wrapper to generate a Python extension module
- Generates HTML and RST documentation of the Python Package using Sphinx
- Installs the C++ library, C++ apps, and the Python package

An example source file tree is provided here for the purpose
of giving context to the build and install examples below, listing paths 
and files that play critical roles in the build and install process: ::
  
	$GPSTK/build.sh
	$GPSTK/CMakeLists.txt
	$GPSTK/swig/CMakeLists.txt
	$GPSTK/swig/install_package/setup.py

Current build and install is automated for Linux only.
A bash script build.sh, is included with this GPSTk 
distribution for this automation, but also to document the 
manual steps that support build and install on a wide 
variety of other platforms. The major dependencies are
CMake, SWIG, gcc, and python (distutils). See setup.py
for a detailed dependency listing with version numbers
that were tested. Additional dependencies needed for 
the generation of documentation are doxygen and sphinx.

Review the help comments of the build script found in the
top-level directory of the GPSTk file tree: ::

	$ build.sh -h

The core library ($GPSTK/core/)is built be default, but 
additional source code that has not been fully tested 
($GPSTK/ext/) and can be built by using the "-e" flag: ::

    $ $GPSTK/build.sh -e

Documentation can be generated by using the "-d" flag: ::

    $ $GPSTK/build.sh -d

There are two options for the install of the C++ library shared
 object file and python package. The "system" install option is
 the default and installs to the following paths:

	C++ lib install path = /usr/local/lib
	python install path  = /usr/lib/pythonX.X/gpstk

The "user" install option is selected by using the "-u" flag 

    $ $GPSTK/build.sh -u

and installs to the following paths:

	C++ lib install path = $HOME/.local/gpstk/lib
	python install path  = $HOME/.local/lib/pythonX.X/site-packages/gpstk

If using the "user" install option, you must manually add the
 install path in $PATH or $LD_LIBRARY_PATH. For example: ::
  
	$ export LD_LIBRARY_PATH=$HOME/.local/gpstk/lib

This is left for the user to do as we did not want the automated
script to change your environment variables without you knowing.

To install the python package in an alternate prefix path, use 
disutils directly with the included setup.py script, for example: ::
  
	# Move to the install package root diretory
	$ cd $GPSTK/swig/install_package
	# run a check on the setup.py file
	$ python setup.py check
	# install the package
	$ python setup.py install
	
Alternatively, to force install into your user home file tree: ::

	# install the package under your home directory
	$ python setup.py --prefix=~/.local

Note that the CMake install uses setup.py.in to allow for CMake variable
values to be written into the final setup.py file which is then used with 
distutils based install. Though setup.py is regenerated from setup.py.in
by CMake, we've preserved setup.py for those who may not have CMake 
installed.

